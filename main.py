import asyncio
import logging
import sqlite3
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

API_TOKEN = "8415722752:AAG223wC-0PAlDd0Ax-jYKpIOVgC7g1M_QU"
WEBHOOK_PATH = "/webhook"
WEBHOOK_SECRET = "super_secret_key"
WEBHOOK_URL = "https://telegram-bot-o8fs.onrender.com/webhook"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect("db.sqlite3")
cursor = conn.cursor()
cursor.execute(
    "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, interactions INT)"
)
conn.commit()

# --- –ö–Ω–æ–ø–∫–∏ ---
interest_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É"),
            KeyboardButton(text="–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è"),
        ],
        [
            KeyboardButton(text="–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω"),
            KeyboardButton(text="–°–ó–ß/–ö–æ–º—ñ—Å"),
        ]
    ],
    resize_keyboard=True,
)

consultation_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", url="https://t.me/robic33ai")]
    ]
)

# --- –¢–µ–∫—Å—Ç–∏ ---
texts = {
    "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É": """‚úÖ –ó–Ω—è—Ç—Ç—è –∑ –†–û–ó–®–£–ö–£ –Ω–∞ 1 —Ä—ñ–∫ - –∑ –ø–æ–≤–Ω–æ—é –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ—é –¥–∞—Ç–æ—é –ø—Ä–æ–π–¥–µ–Ω–æ–≥–æ –í–õ–ö - 4000 –¥–æ–ª

‚úÖ –ë–†–û–ù–Æ–í–ê–ù–ù–Ø —ñ –≤—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 1 —Ä—ñ–∫ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –≤ –†–û–ó–®–£–ö–£ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º —Ä–æ–∑—à—É–∫—É —ñ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ –Ω–∞ 1 —Ä—ñ–∫ - 5500 –¥–æ–ª

–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:
1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ —Ç–∞ –ø–¥—Ñ –∑ —Ä–µ–∑–µ—Ä–≤
2. –ß–∞—Å—Ç–∫–æ–≤–∞ –æ–ø–ª–∞—Ç–∞ –≤ —Ä–æ–∑–º—ñ—Ä—ñ 50% —ñ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ—Å–ª—É–≥–∏
3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –†–µ–∑–µ—Ä–≤+, –û–±–µ—Ä—ñ–≥/–ê—Ä–º–æ—Ä —Ç–∞ –æ–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–æ—ó —á–∞—Å—Ç–∏–Ω–∏
4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∞–ø–µ—Ä–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, —è–∫—â–æ –±—É–ª–∞ –≤–∏–±—Ä–∞–Ω–∞ –¥–∞–Ω–∞ –æ–ø—Ü—ñ—è

‚åõÔ∏è –¢–∞–π–º—ñ–Ω–≥:
–ú–∏—Ç—Ç—î–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è —Ç–∞ —Å–∫—Ä—ñ–Ω—ñ–Ω–≥ –∫–ª—ñ—î–Ω—Ç–∞
–ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É –∞–±–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥ 3 –¥–æ 10 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
–ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è - –≤—ñ–¥ 5 –¥–æ 12 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤

üí≤ –û–ø–ª–∞—Ç–∞:
–ö—Ä–∏–ø—Ç–æ USDT, BTC, XMR –∞–±–æ –∫–∞—Ä—Ç–∞

üí¨ –í–Ü–î–ì–£–ö–ò –¢–ê –ì–ê–†–ê–ù–¢–Ü–á:
–í—ñ–¥–≥—É–∫–∏, –≥–∞—Ä–∞–Ω—Ç—ñ—ó —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∞, —Ç–æ–º—É –≤–∏–¥–∞—î—Ç—å—Å—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏!

–ì–ê–†–ê–ù–¢–û–í–ê–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ê –í–ê–®–ê –ë–ï–ó–ü–ï–ö–ê!
–ó–í–ï–†–¢–ê–ô–¢–ï–°–Ø!!!

–Ω–∞ –≥–æ–ª–æ–≤–Ω—É - /start
–∑–Ω—è—Ç—Ç—è –°–ó–ß - /military""",
    "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è": """‚úÖ –ë–†–û–ù–Æ–í–ê–ù–ù–Ø —ñ –≤—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 1 —Ä—ñ–∫ ...

–Ω–∞ –≥–æ–ª–æ–≤–Ω—É - /start
–∑–Ω—è—Ç—Ç—è –∑ –†–û–ó–®–£–ö–£ - /rozshuk""",
    "–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω": """‚úÖ –í–∏–∫–ª—é—á–µ–Ω–Ω—è –∑ –æ–±–ª—ñ–∫—É –Ω–∞ 5 —Ä–æ–∫—ñ–≤ ...

–Ω–∞ –≥–æ–ª–æ–≤–Ω—É - /start
–≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑ –ó–° - /military""",
    "–°–ó–ß/–ö–æ–º—ñ—Å": """‚úÖ  –ó–Ω—è—Ç—Ç—è –°–ó–ß –Ω–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–∏–π 1 —Ä—ñ–∫ ...

–Ω–∞ –≥–æ–ª–æ–≤–Ω—É - /start
–≤–∏–≤–µ–¥–µ–Ω–Ω—è –∑ –ó–° - /rozshuk""",
}

# --- –§–æ—Ç–æ ---
images = {
    "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É": "images/rozshuk.jpg",
    "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è": "images/bron.jpg",
    "–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω": "images/vyezd.jpg",
    "–°–ó–ß/–ö–æ–º—ñ—Å": "images/szch.jpg",
}

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ê–±–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ 5 + 3 = ?")

@dp.message(F.text == "8")
async def after_captcha(message: types.Message):
    cursor.execute(
        "INSERT OR IGNORE INTO users (id, username, interactions) VALUES (?, ?, 0)",
        (message.from_user.id, message.from_user.username),
    )
    conn.commit()
    await message.answer("–ß—É–¥–æ–≤–æ, –í–∏ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É! –©–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=interest_menu)

@dp.message(F.text.in_(["–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É", "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", "–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω", "–°–ó–ß/–ö–æ–º—ñ—Å"]))
async def send_info(message: types.Message):
    choice = message.text
    photo_path = images[choice]

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ—á–∞—Å–Ω–æ
    with open(photo_path, "rb") as photo:
        sent_photo = await message.answer_photo(photo, caption=texts[choice], reply_markup=consultation_button)

    # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫ —ñ –≤–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ (—Ç–µ–∫—Å—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è, –±–æ –≤—ñ–Ω —É caption)
    await asyncio.sleep(5)
    await sent_photo.delete()

# --- Webhook ---
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL, secret_token=WEBHOOK_SECRET)

async def on_shutdown(app):
    await bot.delete_webhook()

async def handle_webhook(request):
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return web.Response(status=403)
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))

if __name__ == "__main__":
    main()
