import asyncio
import logging
import os
from pathlib import Path
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("API_TOKEN", "PUT-YOUR-TOKEN-HERE")
DB_PATH = "db.sqlite3"
IMAGES_DIR = Path("images")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É"), KeyboardButton(text="–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")],
        [KeyboardButton(text="–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω"), KeyboardButton(text="–°–ó–ß/–ö–æ–º—ñ—Å")],
    ],
    resize_keyboard=True,
)

# --- –ö—Ä–∞—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã ---
intro_texts = {
    "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É": "‚úÖ –ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É –Ω–∞ 1 —Ä—ñ–∫ –∑ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ",
    "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è": "‚úÖ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 1 —Ä—ñ–∫ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –Ω–∞ –æ–±–ª—ñ–∫—É",
    "–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω": "‚úÖ –í–∏–∫–ª—é—á–µ–Ω–Ω—è –∑ –æ–±–ª—ñ–∫—É –Ω–∞ 5 —Ä–æ–∫—ñ–≤ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏—ó–∑–¥—É",
    "–°–ó–ß/–ö–æ–º—ñ—Å": "‚úÖ –ó–Ω—è—Ç—Ç—è –°–ó–ß –Ω–∞ 1 —Ä—ñ–∫ –∞–±–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑—ñ —Å–ª—É–∂–±–∏",
}

# --- –ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã ---
full_texts = {
    "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É": """**–ü–æ—Å–ª—É–≥–∏:**
- –ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É –Ω–∞ 1 —Ä—ñ–∫ –∑ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ
- –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –í–õ–ö

**–í–∞—Ä—Ç—ñ—Å—Ç—å:** –≤—ñ–¥ 4000 $

**–ï—Ç–∞–ø–∏:**
1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
2. –ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%
3. –ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –±–∞–∑–∞—Ö
4. –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤

**–¢–∞–π–º—ñ–Ω–≥:** 3‚Äì10 –¥–Ω—ñ–≤

**–û–ø–ª–∞—Ç–∞:** –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∞–±–æ –∫–∞—Ä—Ç–∞

**–ì–∞—Ä–∞–Ω—Ç—ñ—ó —Ç–∞ –≤—ñ–¥–≥—É–∫–∏:** –Ω–∞–¥–∞—é—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞""",

    "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è": """**–ü–æ—Å–ª—É–≥–∏:**
- –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 1 —Ä—ñ–∫
- –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —É —Ä–æ–∑—à—É–∫—É

**–í–∞—Ä—Ç—ñ—Å—Ç—å:** –≤—ñ–¥ 3000 $

**–ï—Ç–∞–ø–∏:**
1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
2. –ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%
3. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –±–∞–∑–∞—Ö
4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤

**–¢–∞–π–º—ñ–Ω–≥:** 3‚Äì10 –¥–Ω—ñ–≤

**–û–ø–ª–∞—Ç–∞:** –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∞–±–æ –∫–∞—Ä—Ç–∞""",

    "–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω": """**–ü–æ—Å–ª—É–≥–∏:**
- –í–∏–∫–ª—é—á–µ–Ω–Ω—è –∑ –æ–±–ª—ñ–∫—É –Ω–∞ 5 —Ä–æ–∫—ñ–≤
- –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±—ñ–ª–æ–≥–æ –∫–≤–∏—Ç–∫–∞

**–í–∞—Ä—Ç—ñ—Å—Ç—å:** –≤—ñ–¥ 8000 $

**–ï—Ç–∞–ø–∏:**
1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
2. –ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%
3. –ó–Ω—è—Ç—Ç—è –∑ –æ–±–ª—ñ–∫—É, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ –±–∞–∑–∞—Ö
4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤

**–¢–∞–π–º—ñ–Ω–≥:** 10‚Äì20 –¥–Ω—ñ–≤

**–û–ø–ª–∞—Ç–∞:** –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∞–±–æ –∫–∞—Ä—Ç–∞""",

    "–°–ó–ß/–ö–æ–º—ñ—Å": """**–ü–æ—Å–ª—É–≥–∏:**
- –ó–Ω—è—Ç—Ç—è –°–ó–ß –Ω–∞ 1 —Ä—ñ–∫
- –ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑—ñ —Å–ª—É–∂–±–∏ –∑–∞ —Å—Ç–∞–Ω–æ–º –∑–¥–æ—Ä–æ–≤‚Äô—è

**–í–∞—Ä—Ç—ñ—Å—Ç—å:** –≤—ñ–¥ 5000 $

**–ï—Ç–∞–ø–∏:**
1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
2. –ü–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%
3. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –±–∞–∑–∞—Ö
4. –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤

**–¢–∞–π–º—ñ–Ω–≥:** 10‚Äì20 –¥–Ω—ñ–≤

**–û–ø–ª–∞—Ç–∞:** –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∞–±–æ –∫–∞—Ä—Ç–∞""",
}

# --- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
images = {
    "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É": IMAGES_DIR / "rozshuk.jpg",
    "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è": IMAGES_DIR / "bron.jpg",
    "–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω": IMAGES_DIR / "vyezd.jpg",
    "–°–ó–ß/–ö–æ–º—ñ—Å": IMAGES_DIR / "szch.jpg",
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
def check_images():
    for name, path in images.items():
        if not path.exists():
            logging.warning(f"‚ö† –§–æ—Ç–æ –¥–ª—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {path}")
        else:
            logging.info(f"–§–æ—Ç–æ –¥–ª—è '{name}' –Ω–∞–π–¥–µ–Ω–æ: {path}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É" —Å —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–æ–π ---
@dp.message(F.text == "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É")
async def send_znyat_rozshuk(message: types.Message):
    photo_path = images.get("–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É")
    if photo_path and photo_path.exists():
        photo = FSInputFile(photo_path)
        sent_photo = await message.answer_photo(photo, caption="‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...")
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(5)
        await sent_photo.delete()
    else:
        logging.warning("–§–æ—Ç–æ –¥–ª—è '–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
    text = (
        "‚úÖ *–ó–Ω—è—Ç—Ç—è –∑ –†–û–ó–®–£–ö–£* –Ω–∞ 1 —Ä—ñ–∫ - –∑ –ø–æ–≤–Ω–æ—é –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ—é –¥–∞—Ç–æ—é –ø—Ä–æ–π–¥–µ–Ω–æ–≥–æ –í–õ–ö - *4000 $*\n\n"
        "‚úÖ *–ë–†–û–ù–Æ–í–ê–ù–ù–Ø* —ñ –≤—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 1 —Ä—ñ–∫ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –≤ –†–û–ó–®–£–ö–£ –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º —Ä–æ–∑—à—É–∫—É —ñ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ –Ω–∞ 1 —Ä—ñ–∫ - *5500 $*\n\n"
        "*–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:*\n"
        "1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ —Ç–∞ PDF –∑ —Ä–µ–∑–µ—Ä–≤—É\n"
        "2. –ß–∞—Å—Ç–∫–æ–≤–∞ –æ–ø–ª–∞—Ç–∞ –≤ —Ä–æ–∑–º—ñ—Ä—ñ 50% —ñ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ—Å–ª—É–≥–∏\n"
        "3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –†–µ–∑–µ—Ä–≤+, –û–±–µ—Ä—ñ–≥/–ê—Ä–º–æ—Ä —Ç–∞ –æ–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–æ—ó —á–∞—Å—Ç–∏–Ω–∏\n"
        "4. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∞–ø–µ—Ä–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, —è–∫—â–æ –±—É–ª–∞ –≤–∏–±—Ä–∞–Ω–∞ –¥–∞–Ω–∞ –æ–ø—Ü—ñ—è\n\n"
        "‚åõÔ∏è *–¢–∞–π–º—ñ–Ω–≥:*\n"
        "- –ú–∏—Ç—Ç—î–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è —Ç–∞ —Å–∫—Ä—ñ–Ω—ñ–Ω–≥ –∫–ª—ñ—î–Ω—Ç–∞\n"
        "- –ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É –∞–±–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥ 3 –¥–æ 10 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤\n"
        "- –ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É —Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è - –≤—ñ–¥ 5 –¥–æ 12 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤\n\n"
        "üí≤ *–û–ø–ª–∞—Ç–∞:* –ö—Ä–∏–ø—Ç–æ USDT, BTC, XMR –∞–±–æ –∫–∞—Ä—Ç–∞\n\n"
        "üí¨ *–í–Ü–î–ì–£–ö–ò –¢–ê –ì–ê–†–ê–ù–¢–Ü–á:*\n"
        "–í—ñ–¥–≥—É–∫–∏, –≥–∞—Ä–∞–Ω—Ç—ñ—ó —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∞, "
        "—Ç–æ–º—É –≤–∏–¥–∞—î—Ç—å—Å—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—ñ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n"
        "üîí *–ì–ê–†–ê–ù–¢–û–í–ê–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ê –í–ê–®–ê –ë–ï–ó–ü–ï–ö–ê!*\n"
        "–ó–í–ï–†–¢–ê–ô–¢–ï–°–Ø!!!\n\n"
        "–Ω–∞ –≥–æ–ª–æ–≤–Ω—É - /start\n"
        "–∑–Ω—è—Ç—Ç—è –°–ó–ß - /military"
    )

    # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (—à–∏—Ä–æ–∫–∞—è –ø–æ–¥ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–æ–º)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", url="https://t.me/robic33ai")]
        ]
    )

    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–º–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ) ---

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 5 + 3 = ?")

@dp.message(F.text == "8")
async def after_captcha(message: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (id, username, interactions) VALUES (?, ?, 0)",
            (message.from_user.id, message.from_user.username),
        )
        await db.commit()
    await message.answer("–ß—É–¥–æ–≤–æ, –≤–∏ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=main_menu)

@dp.message(F.text.in_(intro_texts.keys()))
async def send_intro(message: types.Message):
    choice = message.text
    photo_path = images.get(choice)

    if photo_path and photo_path.exists():
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo, caption=intro_texts[choice])
    else:
        await message.answer(intro_texts[choice])

    details_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"details_{choice}"),
                InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", url="https://t.me/robic33ai"),
            ]
        ]
    )
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=details_keyboard)

@dp.callback_query(F.data.startswith("details_"))
async def send_details(callback: types.CallbackQuery):
    choice = callback.data.replace("details_", "")
    await callback.message.answer(full_texts[choice])

    consultation_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", url="https://t.me/robic33ai")]
        ]
    )
    await callback.message.answer("–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:", reply_markup=consultation_button)
    await callback.answer()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, interactions INT)"
        )
        await db.commit()

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    check_images()  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
