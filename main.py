import asyncio
import logging
import os
from pathlib import Path
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("API_TOKEN", "PUT-YOUR-TOKEN-HERE")
DB_PATH = "db.sqlite3"
IMAGES_DIR = Path("images")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É"), KeyboardButton(text="–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è")],
        [KeyboardButton(text="–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω"), KeyboardButton(text="–°–ó–ß/–ö–æ–º—ñ—Å")],
    ],
    resize_keyboard=True,
)

# --- –¢–µ–∫—Å—Ç—ã –¥–ª—è "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É" ---
rozshuk_text = """‚úÖ <b>–ó–Ω—è—Ç—Ç—è –∑ –†–û–ó–®–£–ö–£ –Ω–∞ 1 —Ä—ñ–∫</b> 
- –∑ –ø–æ–≤–Ω–æ—é –≥–∞—Ä–∞–Ω—Ç—ñ—î—é –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ 
- –æ–Ω–æ–≤–ª–µ–Ω–æ—é –¥–∞—Ç–æ—é –ø—Ä–æ–π–¥–µ–Ω–æ–≥–æ –í–õ–ö 
üí∞ <i>–í–∞—Ä—Ç—ñ—Å—Ç—å:</i> <b>4000 $</b>

‚úÖ <b>–ë–†–û–ù–Æ–í–ê–ù–ù–Ø —ñ –≤—ñ–¥—Å—Ç—Ä–æ—á–∫–∞ –Ω–∞ 1 —Ä—ñ–∫</b>
- –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –≤ –†–û–ó–®–£–ö–£ 
- –∑ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è–º —Ä–æ–∑—à—É–∫—É 
- –≥–∞—Ä–∞–Ω—Ç—ñ—è –Ω–µ–¥–æ—Ç–æ—Ä–∫–∞–Ω–æ—Å—Ç—ñ –Ω–∞ 1 —Ä—ñ–∫ 
üí∞ <i>–í–∞—Ä—Ç—ñ—Å—Ç—å:</i> <b>5500 $</b>

üìå <b>–ü—Ä–æ—Ü–µ–¥—É—Ä–∞:</b>
1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ —Ç–∞ PDF –∑ —Ä–µ–∑–µ—Ä–≤
2. –ß–∞—Å—Ç–∫–æ–≤–∞ –æ–ø–ª–∞—Ç–∞ 50% + –∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–æ—Å–ª—É–≥–∏
3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ (–†–µ–∑–µ—Ä–≤+, –û–±–µ—Ä—ñ–≥/–ê—Ä–º–æ—Ä)
4. –û–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–æ—ó —á–∞—Å—Ç–∏–Ω–∏
5. –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∞–ø–µ—Ä–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)

‚è≥ <b>–¢–∞–π–º—ñ–Ω–≥:</b>
‚ñ™ –ú–∏—Ç—Ç—î–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è —Ç–∞ —Å–∫—Ä—ñ–Ω—ñ–Ω–≥
‚ñ™ –ó–Ω—è—Ç—Ç—è –∑ —Ä–æ–∑—à—É–∫—É: 3-10 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
‚ñ™ –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: 3-10 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤
‚ñ™ –ö–æ–º–ø–ª–µ–∫—Å: 5-12 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤

üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>
USDT | BTC | XMR | –ö–∞—Ä—Ç–∞ –£–∫—Ä–∞—ó–Ω–∏

üîí <b>–ì–∞—Ä–∞–Ω—Ç—ñ—ó:</b>
–í—Å—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –≤—ñ–¥–≥—É–∫–∏ —Ç–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—ó –Ω–∞–¥–∞—é—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É!

üõ° <b>–ì–ê–†–ê–ù–¢–û–í–ê–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ê –ü–û–í–ù–ê –ë–ï–ó–ü–ï–ö–ê!</b>

üëâ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
üëâ /military - –∑–Ω—è—Ç—Ç—è –°–ó–ß"""

# --- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
images = {
    "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É": IMAGES_DIR / "rozshuk.jpg",
    "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è": IMAGES_DIR / "bron.jpg",
    "–í–∏—ó–∑–¥ –∑–∞ –∫–æ—Ä–¥–æ–Ω": IMAGES_DIR / "vyezd.jpg",
    "–°–ó–ß/–ö–æ–º—ñ—Å": IMAGES_DIR / "szch.jpg",
}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –Ω–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 5 + 3 = ?")

@dp.message(F.text == "8")
async def after_captcha(message: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (id, username, interactions) VALUES (?, ?, 0)",
            (message.from_user.id, message.from_user.username),
        )
        await db.commit()
    await message.answer("–ß—É–¥–æ–≤–æ, –≤–∏ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É! –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=main_menu)

@dp.message(F.text == "–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É")
async def handle_rozshuk(message: types.Message):
    photo_path = images["–ó–Ω—è—Ç–∏ –∑ –†–æ–∑—à—É–∫—É"]
    
    if photo_path.exists():
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫)
            photo = FSInputFile(photo_path)
            sent_photo = await message.answer_photo(
                photo, 
                caption="üîÑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...",
                parse_mode="HTML"
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            await bot.delete_message(chat_id=message.chat.id, message_id=sent_photo.message_id)
            
        except Exception as e:
            logging.error(f"Error sending photo: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    await message.answer(
        rozshuk_text,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    consultation_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üî∑ –û–¢–†–ò–ú–ê–¢–ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–Ü–Æ üî∑", 
                url="https://t.me/robic33ai"
            )]
        ]
    )
    await message.answer(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –∑–≤'—è–∑–∫—É –∑ —Ñ–∞—Ö—ñ–≤—Ü–µ–º:",
        reply_markup=consultation_button
    )

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, interactions INT)"
        )
        await db.commit()

# --- –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
